PF_RING ZC Examples
-------------------

This file contains some examples that introduce you to PF_RING ZC. 

We suppose that you have loaded one of the PF_RING-aware drivers with ZC support in single RX queue mode.
I also assume that there are two ports, eth1 and eth2, that are connected directly (loopback).

PF_RING/kernel# insmod ./pf_ring.ko
PF_RING/drivers/PF_RING_aware/intel/ixgbe/ixgbe-XXX-zc/src# ./load_driver.sh

We use single-RX queues to demonstrate the packet distribution capabilities of ZC and to show that in all
our tests we have never used Intel's RSS.

Start the traffic generator and leave it running as follows:

PF_RING/userland/examples_zc# ./zsend -i zc:eth1 -c 1 -g 0 -b 8 -l 60

or (better) use a traffic generator and send traffic that can be balanced across cores (e.g. packets with rotating addresses).
In order to test the code in the worst possible case, please send 60+4 bytes packets.

---

Example 1. Hash incoming packets and read them on 2 threads

PF_RING/userland/examples_zc# ./zbalance -i zc:eth4 -c 4 -m 0 -r 1 -g 2:3

---

Example 2. Hash incoming packets and read them on 2 processes

PF_RING/userland/examples_zc# ./zbalance_ipc -i zc:eth2 -c 99 -n 2 -m 0 -g 1

PF_RING/userland/examples_zc# ./zcount_ipc -c 99 -i 0 -g 2
PF_RING/userland/examples_zc# ./zcount_ipc -c 99 -i 1 -g 3

---

Example 3. Hash incoming packets and read them on 2 legacy pcap-based applications

PF_RING/userland/examples_zc# ./zbalance_ipc -i zc:eth2 -c 99 -n 2 -m 0 -g 1

PF_RING/userland/tcpdump-4.1.1# ./tcpdump -i zc:99@0
PF_RING/userland/tcpdump-4.1.1# ./tcpdump -i zc:99@1

---

Example 4. Enqueue incoming packets to a pipeline with 2 threads

PF_RING/userland/examples_zc# ./zpipeline -i zc:eth2 -c 99 -g 2:3 

---

Example 5. Enqueue incoming packets to a queue, on another process forward packets from the queue to another queue, send packets from the second queue to an egress interface 


PF_RING/userland/examples_zc# ./zpipeline_ipc -i zc:eth2,0 -o zc:eth3,1 -n 2 -c 99 -r 1 -t 2

PF_RING/userland/examples_zc# ./zbounce_ipc -c 99 -i 0 -o 1 -g 3

(note that the zbounce_ipc application can run on a VM, a pipeline with multiple VMs can be created allocating more queues)


